TODO NEW, URGENT
* Refactor everything to use the same global system
	(I quite like this article about globals http://clarkkromenaker.com/post/cpp-manager-access/)
	I think the best approach for this small project is to have a "global of globals" approach, probably.
	Until, of course, we can be bothered to do some dependency injection.
* Clean up scene code to make ownership a little clearer
* Add a proper level class (Don't forget this is leaking the mesh...)
* Add config (This includes xml loading)
* Add sound playing
* Refactor the debug renderer into the renderer class. It doesn't need to be a seperate thing

TODO OLD
* Add MeshManager, SoundManager classes. Could add a ResourceManager instead, or have ResourceManager keep an intstance of each other manager for organisation
* Add sound to the game!!! (OpenALSoft, libsndfile)
* Seperate OBJ loading into its own class so Collision Mesh loading can be seperated from renderable mesh loading
* (low priority) Add Window class and move event loop into that, so there is more control over window events that arent necessarily input related (on focus)
* Add configuration file for things like Windowed width and height, mouse sensitivity, field of view, music volume, sound effect volume...
* Actually set up a good entity system with enemies
* Add XML loading for entities and levels
* Create a blender script for exporting levels. Export an .OBJ of the level mesh and then export positions of entities etc. to structure an XML file
* (low priority) Animated sprites/billboard enemies
* Enemy pathfinding. Probably do something where pathfinding nodes can be placed in blender and just do AStar (revisit this. possibly generate a grid of nodes in blender that automatically discard intersections. Assuming you can check for mesh intersections in blender api)
* (low priority) Decals for bullet holes, or just meshes
* Raycast collision for attacking enemies , adding particles or bullet decals on walls
* (very low priority) Basic particle system?
* Fix physics update, fixed update. need to do some research on this
* (low priority) Remove bullet dynamics but keep the collision detection. Basically just create a kinematic character controller from scratch instead of relying on bullet.
* Better lighting. Point lights.
* First person weapon sprites. include procedural bouncy animation for walking
* Refactor camera class to make it less hardcoded. Split it out so I can make a debug camera and a first person camera
